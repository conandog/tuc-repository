using Controller.Implementation;
using QuanLyDonHang.Common;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Text.RegularExpressions;

namespace QuanLyDonHang
{
    /// <summary>
    /// Interaction logic for WindowImportData.xaml
    /// </summary>
    public partial class WindowImportData : Window
    {
        private Common.CommonConstants.DATATYPE dataType;

        public WindowImportData()
        {
            InitializeComponent();
        }

        public void SetDisplayData(Common.CommonConstants.DATATYPE type)
        {
            try
            {
                string path = Controller.Common.File_Function.OpenDialog("Excel", "xlsx");

                if (!String.IsNullOrEmpty(path))
                {
                    Controller.Common.Office_Function.InitWorkBook(path, 1);
                    dgShowInfo.DataContext = Controller.Common.Office_Function.GetTable().DefaultView;
                    dataType = type;
                }
            }
            catch (Exception ex)
            {
                btImport.IsEnabled = false;
                MessageBox.Show(ex.Message);
            }
        }

        private void btImport_Click(object sender, RoutedEventArgs e)
        {
            switch (dataType)
            {
                case (CommonConstants.DATATYPE.NhaThuoc):
                    ImportNhaThuoc();
                    break;
                case (CommonConstants.DATATYPE.Catalogue):
                    ImportCatalogue();
                    break;
                default:
                    break;

            }
        }

        private void ImportCatalogue()
        {
            try
            {
                int? id = null;
                for (int i = 0; i < dgShowInfo.Items.Count; i++)
                {
                    DataRowView item = dgShowInfo.Items[i] as DataRowView;
                    string tbCataCountry = item.Row.ItemArray[0].ToString();
                    string tbCataCategory = item.Row.ItemArray[1].ToString();
                    string tbCataSubCate = item.Row.ItemArray[2].ToString();
                    string tbCataSuplierCode = item.Row.ItemArray[3].ToString();
                    string tbCataSuplierName = item.Row.ItemArray[4].ToString();
                    string cbItemGroup = String.Empty;
                    string tbCataItemDescrip = item.Row.ItemArray[5].ToString();
                    string tbCataCode = (Regex.Split(tbCataItemDescrip, "_"))[0];
                    string tbCataMoreDescrip = item.Row.ItemArray[6].ToString();
                    string tbCataPartNumber = item.Row.ItemArray[7].ToString();
                    string tbCataUOM = item.Row.ItemArray[8].ToString();
                    string tbCataUnitPrice = item.Row.ItemArray[9].ToString();
                    string tbCataRefPrice = item.Row.ItemArray[10].ToString();
                    string tbCataRemark = item.Row.ItemArray[11].ToString();
                    string tbCataGLCode = item.Row.ItemArray[12].ToString();
                    string tbCataHACAT = item.Row.ItemArray[13].ToString();
                    string tbCataCurrency = item.Row.ItemArray[16].ToString();
                    string effective = item.Row.ItemArray[14].ToString() != "" ? item.Row.ItemArray[14].ToString() : "0";
                    double date = double.Parse(effective);
                    DateTime effectiveDate = DateTime.FromOADate(date);
                    string efpiry = item.Row.ItemArray[15].ToString() != "" ? item.Row.ItemArray[15].ToString() : "0";
                    date = double.Parse(efpiry);
                    DateTime efpiryDate = DateTime.FromOADate(date);
                    id = CatalogueImp.Insert(tbCataCountry, tbCataCategory, tbCataItemDescrip, int.Parse(tbCataUnitPrice), int.Parse(tbCataRefPrice), tbCataCurrency, effectiveDate, efpiryDate, tbCataCode, tbCataSubCate, tbCataSuplierCode, tbCataSuplierName, cbItemGroup, tbCataMoreDescrip, tbCataPartNumber, tbCataUOM, tbCataRemark, tbCataGLCode, tbCataHACAT);
                }

                if (id != null)
                {
                    MessageBox.Show("Cập nhật dữ liệu thành công");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void ImportNhaThuoc()
        {
            try
            {
                int? id = null;
                for (int i = 0; i < dgShowInfo.Items.Count; i++)
                {
                    DataRowView item = dgShowInfo.Items[i] as DataRowView;
                    string tbNTCode = item.Row.ItemArray[0].ToString();
                    string tbNTName = item.Row.ItemArray[1].ToString();
                    string tbNTAddress  = item.Row.ItemArray[2].ToString();
                    string tbNTStreet = item.Row.ItemArray[3].ToString();
                    string tbNTOther = item.Row.ItemArray[4].ToString();
                    string tbNTWard = item.Row.ItemArray[5].ToString();
                    string tbNTDistric = item.Row.ItemArray[6].ToString();
                    string tbNTCity  = item.Row.ItemArray[7].ToString();
                    string tbNTArea  = item.Row.ItemArray[8].ToString();
                    string tbNTZone  = item.Row.ItemArray[9].ToString();
                    string tbNTPharmacist  = item.Row.ItemArray[10].ToString();
                    string tbNTOwner = item.Row.ItemArray[11].ToString();
                    string tbNTDTB = item.Row.ItemArray[12].ToString();
                    string tbNTDTDD  = item.Row.ItemArray[13].ToString();
                    string tbNTInFYLCD  = item.Row.ItemArray[14].ToString();
                    string tbNTRL = item.Row.ItemArray[15].ToString();
                    id = NhaThuocImp.Insert(tbNTCode, tbNTName, tbNTAddress, tbNTStreet, tbNTDistric, tbNTOther, tbNTWard, tbNTCity, tbNTArea, tbNTZone, tbNTPharmacist, tbNTOwner, tbNTDTB, tbNTDTDD, tbNTInFYLCD, tbNTRL);
                }

                if (id != null)
                {
                    MessageBox.Show("Cập nhật dữ liệu thành công");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void WindowImportData1_Closed(object sender, EventArgs e)
        {   
        }
    }
}
