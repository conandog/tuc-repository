using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Controller.Implementation;
using QuanLyDonHang.Common;
using Model;
using System.Windows.Controls.Primitives;

namespace QuanLyDonHang
{
    /// <summary>
    /// Interaction logic for MasterDataUC.xaml
    /// </summary>
    public partial class MasterDataUC : UserControl
    {
        private User _user;
        private NhaThuoc _nhathuoc;
        private MasterChiPhi _master;
        private ItemMaster _selectedItem;
        private List<History> _lshistory;
        private string lstRowDelete = string.Empty;
        public MasterDataUC()
        {
            InitializeComponent();
        }

        private void MasterDataUC_Loaded(object sender, RoutedEventArgs e)
        {
            InitDate();
            InitFilter(cbKhaoSat, CommonConstants.ITEMGROUP_KHAOSAT);
            InitFilter(cbVanChuyen, CommonConstants.ITEMGROUP_VANCHUYEN);
            InitFilter(cbThiCong, CommonConstants.ITEMGROUP_HANGMUCTHICONG);
            InitFilter(cbLapDat, CommonConstants.ITEMGROUP_LAPDAT);
            InitFilter(cbXinPhep, CommonConstants.ITEMGROUP_XINPHEP);
            InitFilter(cbMucKhac, CommonConstants.ITEMGROUP_HANGMUCKHAC);
            LoadData();
            CheckPermission();
        }

        private void LoadData()
        {
            try
            {
                List<ItemMaster> _lsMasterItem = new List<ItemMaster>();
                Catalogue cata = null;
                int? IdKhaoSat = null;

                if (cbKhaoSat.SelectedItem != null && ((CommonComboBoxItem)cbKhaoSat.SelectedItem).Value != null)
                {
                    cata = ((CommonComboBoxItem)cbKhaoSat.SelectedItem).Value as Catalogue;
                    IdKhaoSat = cata.Id;
                }

                int? IdVanChuyen = null;

                if (cbVanChuyen.SelectedItem != null && ((CommonComboBoxItem)cbVanChuyen.SelectedItem).Value != null)
                {
                    cata = ((CommonComboBoxItem)cbVanChuyen.SelectedItem).Value as Catalogue;
                    IdVanChuyen = cata.Id;
                }

                int? IdLapDat = null;

                if (cbLapDat.SelectedItem != null && ((CommonComboBoxItem)cbLapDat.SelectedItem).Value != null)
                {
                    cata = ((CommonComboBoxItem)cbLapDat.SelectedItem).Value as Catalogue;
                    IdLapDat = cata.Id;
                }

                int? IdXinPhep = null;

                if (cbXinPhep.SelectedItem != null && ((CommonComboBoxItem)cbXinPhep.SelectedItem).Value != null)
                {
                    cata = ((CommonComboBoxItem)cbXinPhep.SelectedItem).Value as Catalogue;
                    IdXinPhep = cata.Id;
                }

                int? IdThiCong = null;

                if (cbThiCong.SelectedItem != null && ((CommonComboBoxItem)cbThiCong.SelectedItem).Value != null)
                {
                    cata = ((CommonComboBoxItem)cbThiCong.SelectedItem).Value as Catalogue;
                    IdThiCong = cata.Id;
                }

                int? IdMucKhac = null;

                if (cbMucKhac.SelectedItem != null && ((CommonComboBoxItem)cbMucKhac.SelectedItem).Value != null)
                {
                    cata = ((CommonComboBoxItem)cbMucKhac.SelectedItem).Value as Catalogue;
                    IdMucKhac = cata.Id;
                }

                _lshistory = HistoryImp.GetList(tbNhaThuoc.Text, IdKhaoSat, IdVanChuyen, IdThiCong,
                    IdLapDat, IdXinPhep, IdMucKhac, dpDate.SelectedDate, cbDateType.SelectedValue.ToString(), chbShowHistory.IsChecked.Value);

                int i = 1;
                foreach (History _history in _lshistory)
                {
                    _user = UserImp.GetById(_history.IdUser);
                    _nhathuoc = NhaThuocImp.GetById(_history.IdNhaThuoc);
                    _master = MasterChiPhiImp.GetById(_history.IdMasterChiPhi);
                    ItemMaster _itemmaster = CreateGridItem(i, _history);
                    _lsMasterItem.Add(_itemmaster);
                    i++;
                }

                dgShowInfo.ItemsSource = _lsMasterItem;

                if (_lsMasterItem.Count > 0)
                {
                    btXuatExcel.IsEnabled = true;
                }
                else
                {
                    btXuatExcel.IsEnabled = false;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void InitDate()
        {
            cbDateType.Items.Add(Controller.Common.CommonConstants.DEFAULT_TYPE_DAY);
            cbDateType.Items.Add(Controller.Common.CommonConstants.DEFAULT_TYPE_WEEK);
            cbDateType.Items.Add(Controller.Common.CommonConstants.DEFAULT_TYPE_MONTH);
            cbDateType.Items.Add(Controller.Common.CommonConstants.DEFAULT_TYPE_YEAR);
            cbDateType.SelectedIndex = 0;
            dpDate.SelectedDate = DateTime.Now;
        }

        private void InitFilter(ComboBox combo, string itemgroup)
        {
            try
            {
                List<Catalogue> listData = CatalogueImp.GetList(String.Empty, itemgroup, String.Empty, String.Empty, 0, 0);
                combo.Items.Add(new CommonComboBoxItem(String.Empty, null));
                foreach (Catalogue data in listData)
                {
                    combo.Items.Add(new CommonComboBoxItem(data.ItemDescription, data)); //get all data or just get unit price
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                //log
            }
        }

        private void CheckPermission()
        {
            if (!CommonFunction.CheckEditPermission())
            {
                btEdit.Visibility = Visibility.Hidden;
            }
        }

        public ItemMaster CreateGridItem(int stt, History history)
        {
            ItemMaster _itemmaster = new ItemMaster();

            try
            {
                _itemmaster.id = history.Id;
                _itemmaster.stt = stt;
                _itemmaster.ngayorder = history.NgayOrder.HasValue ? history.NgayOrder.Value.ToShortDateString() : String.Empty;
                _itemmaster.codemer = _nhathuoc.CodeMer;
                _itemmaster.pharmacyname = _nhathuoc.PharmacyName;
                _itemmaster.address = _nhathuoc.Address;
                _itemmaster.street = _nhathuoc.Street;
                _itemmaster.other = _nhathuoc.Other;
                _itemmaster.ward = _nhathuoc.Ward;
                _itemmaster.dictrict = _nhathuoc.District;
                _itemmaster.city = _nhathuoc.Province;
                Catalogue _cata;
                if (_master.IdCatalogueKS != null)
                {
                    _cata = CatalogueImp.GetById((int)_master.IdCatalogueKS);
                    _itemmaster.khaosat = _cata.ItemDescription;
                    _itemmaster.chiphiKS = _cata.UnitPrice;
                }

                if (_master.IdCatalogueVC != null)
                {
                    _cata = CatalogueImp.GetById((int)_master.IdCatalogueVC);
                    _itemmaster.vanchuyen = _cata.ItemDescription;
                    _itemmaster.chiphiVC = _cata.UnitPrice;
                }

                if (_master.IdCatalogueHMTC != null)
                {
                    _cata = CatalogueImp.GetById((int)_master.IdCatalogueHMTC);
                    _itemmaster.HMTC = _cata.ItemDescription;
                    _itemmaster.donviHMTC = _cata.PartNumber;
                    _itemmaster.dongiaTC = _cata.UnitPrice;
                }

                if (_master.IdCatalogueLD != null)
                {
                    _cata = CatalogueImp.GetById((int)_master.IdCatalogueLD);
                    _itemmaster.lapdat = _cata.ItemDescription;
                    _itemmaster.donviLD = _cata.PartNumber;
                    _itemmaster.dongiaLD = _cata.UnitPrice;
                }

                if (_master.IdCatalogueXP != null)
                {
                    _cata = CatalogueImp.GetById((int)_master.IdCatalogueXP);
                    _itemmaster.xinphep = _cata.ItemDescription;
                    _itemmaster.donviXP = _cata.PartNumber;
                    _itemmaster.dongiaXP = _cata.UnitPrice;
                }

                double ngang = _master.Ngang != null ? (double)_master.Ngang : 0;
                double rong = _master.Rong != null ? (double)_master.Rong : 0;
                double soluong = _master.QtyHMTC != null ? (byte)_master.QtyHMTC : (byte)0;
                double dientich = ngang * rong * soluong;
                _itemmaster.ngang = _master.Ngang;
                _itemmaster.rong = _master.Rong;
                _itemmaster.soluong = _master.QtyHMTC;

                if (dientich != 0)
                { 
                    _itemmaster.dientich = dientich;
                    _itemmaster.tienTC = _itemmaster.dientich * _itemmaster.dongiaTC;
                    _itemmaster.tienLD = _itemmaster.dientich * _itemmaster.dongiaLD;
                    _itemmaster.tienXP = _itemmaster.dientich * _itemmaster.dongiaXP;
                }

                if (_master.IdCatalogueHMK != null)
                {
                    _cata = CatalogueImp.GetById((int)_master.IdCatalogueHMK);
                    _itemmaster.HMK = _cata.ItemDescription;
                    _itemmaster.donviHMK = _cata.PartNumber;
                    _itemmaster.dongiaHMK = _cata.UnitPrice;

                    if (_master.QtyHMK != null)
                    {
                        _itemmaster.soluongHMK = _master.QtyHMK;
                        _itemmaster.tienHMK = _itemmaster.soluongHMK * _itemmaster.dongiaHMK;
                    }
                }

                _itemmaster.brand = _master.Brand;
                _itemmaster.tongcong = Controller.Common.ConvertUtil.ConvertToDouble(_itemmaster.chiphiKS) +
                    Controller.Common.ConvertUtil.ConvertToDouble(_itemmaster.chiphiVC) +
                    Controller.Common.ConvertUtil.ConvertToDouble(_itemmaster.tienHMK) +
                    Controller.Common.ConvertUtil.ConvertToDouble(_itemmaster.tienLD) +
                    Controller.Common.ConvertUtil.ConvertToDouble(_itemmaster.tienTC) +
                    Controller.Common.ConvertUtil.ConvertToDouble(_itemmaster.tienXP);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            return _itemmaster;
        }

        private void btXuatExcel_Click(object sender, RoutedEventArgs e)
        {
            if (_lshistory.Count > 0)
            {
                try
                {
                    Controller.Common.CommonFunction.ExportMasterChiPhi(_lshistory);
                    MessageBox.Show("Xuất dữ liệu thành công");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
            else
            {
                MessageBox.Show("Không có dữ liệu để xuất");
            }
        }

        private void btEdit_Click(object sender, RoutedEventArgs e)
        {
            ManagerWD _managerWD = (ManagerWD)Window.GetWindow(this);
            _managerWD.EditPriceUC(_selectedItem);
        }

        private void dgShowInfo_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            lstRowDelete = string.Empty;
            System.Collections.IList _lsSelected = dgShowInfo.SelectedItems;
            foreach (ItemMaster _master in _lsSelected)
            {
                _selectedItem = _master;
                lstRowDelete += _selectedItem.id + CommonConstants.DELIMITER_STRING;
            }
            if (string.IsNullOrEmpty(lstRowDelete))
            {
                btEdit.IsEnabled = false;
                chbSelect.IsChecked = false;
            }
            else
            {
                btEdit.IsEnabled = true;
                chbSelect.IsChecked = true;
            }
        }

        private void SelectRowByIndex(int startrow, int endrow)
        {
            dgShowInfo.SelectedItems.Clear();
            for (int i = startrow; i < endrow; i++)
            {
                object item = dgShowInfo.Items[i]; //=Product X
                dgShowInfo.SelectedItems.Add(item);
            }
        }

        private void chbSelect_Click(object sender, RoutedEventArgs e)
        {
            CheckBox chb = sender as CheckBox;
            if ((bool)chb.IsChecked)
            {
                SelectRowByIndex(0, dgShowInfo.Items.Count);
            }
            else
            {
                dgShowInfo.SelectedItems.Clear();
            }
        }

        private void cbDateType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            LoadData();
        }

        private void dpDate_SelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {
            LoadData();
        }

        private void tbNhaThuoc_TextChanged(object sender, TextChangedEventArgs e)
        {
            LoadData();
        }

        private void chbShowHistory_Click(object sender, RoutedEventArgs e)
        {
            LoadData();
        }

        private void cb_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            ComboBox comboBox = sender as ComboBox;
            TextBox textBox = comboBox.Template.FindName("PART_EditableTextBox", comboBox) as TextBox;
            Popup popup = comboBox.Template.FindName("PART_Popup", comboBox) as Popup;

            if (textBox != null)
            {
                //textBox.TextChanged += delegate
                //{
                popup.IsOpen = true;
                comboBox.Items.Filter += a =>
                {
                    if (a.ToString().ToLower().StartsWith(textBox.Text.ToLower()))
                    {
                        return true;
                    }
                    return false;
                };
                //};
            }
        }

        private void cbKhaoSat_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            LoadData();
        }

        private void cbVanChuyen_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            LoadData();
        }

        private void cbThiCong_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            LoadData();
        }

        private void cbLapDat_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            LoadData();
        }

        private void cbXinPhep_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            LoadData();
        }

        private void cbMucKhac_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            LoadData();
        }
    }

    public class ItemMaster
    {
        public int id { get; set; }
        public int stt {get; set;}
        public string ngayorder { get; set; }
        public string codemer { get; set; }
        public string pharmacyname { get; set; }
        public string address { get; set; }
        public string street { get; set; }
        public string other { get; set; }
        public string ward { get; set; }
        public string dictrict { get; set; }
        public string city { get; set; }
        public string khaosat { get; set; }
        public double? chiphiKS { get; set; }
        public string vanchuyen { get; set; }
        public double? chiphiVC { get; set; }
        public string HMTC { get; set; }
        public string donviHMTC { get; set; }
        public double? dongiaTC { get; set; }
        public string lapdat { get; set; }
        public string donviLD { get; set; }
        public double? dongiaLD { get; set; }
        public string xinphep { get; set; }
        public string donviXP { get; set; }
        public double? dongiaXP { get; set; }
        public double? ngang { get; set; }
        public double? rong { get; set; }
        public byte? soluong { get; set; }
        public double? dientich { get; set; }
        public double? tienTC { get; set; }
        public double? tienLD { get; set; }
        public double? tienXP { get; set; }
        public string HMK { get; set; }
        public string donviHMK { get; set; }
        public double? dongiaHMK { get; set; }
        public byte? soluongHMK { get; set; }
        public double? tienHMK { get; set; }
        public string brand { get; set; }
        public double tongcong { get; set; }
    }
}
